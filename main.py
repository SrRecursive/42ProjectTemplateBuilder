import os

def create_dirs():
    if (not os.path.exists("include")):
        os.makedirs("include")
    if (not os.path.exists("src")):
        os.makedirs("src")
    if (not os.path.exists("utils")):
        os.makedirs("utils")

def c_main_template(name):
    file = open(os.path.join("src/{}.c").format(name), 'w')
    file.write('#include "../include/{}.h"\n'.format(name))
    file.write('\n')
    file.write('int\tmain(int argc, char **argv)\n')
    file.write('{\n')
    file.write('\tprintf("Hello World\\n");\n')
    file.write('\tribanab();\n')
    file.write('\treturn (0);\n')
    file.write('}')
    file.write('\n')
    file.close

def c_header_template(name):
    file = open(os.path.join("include/{}.h".format(name)), 'w')
    file.write('#ifndef {}_H\n'.format(name.upper()))
    file.write('# define {}_H\n'.format(name.upper()))
    file.write('\n')
    file.write('/* <--Defines Section--> */\n')
    file.write('\n')
    file.write('/* <--Libraries Section--> */\n')
    file.write('# include <stdio.h>\n')
    file.write('\n')
    file.write('/* <--Structs Section--> */\n')
    file.write('\n')
    file.write('/* <--Functions Section--> */\n')
    file.write('void\tribanab(void);\n')
    file.write('\n')
    file.write('#endif')
    file.close

def c_utils_template(name):
    file = open(os.path.join("utils/utils.c"), 'w')
    file.write('#include "../include/{}.h"\n'.format(name))
    file.write('\n')
    file.write('void\tribanab(void)\n')
    file.write('{\n')
    file.write('\tprintf("ribana-b is a 42 Student :O\\n");\n')
    file.write('\treturn ;\n')
    file.write('}')
    file.write('\n')

    file.close

def c_makefile_template(name):
    file = open(os.path.join("Makefile"), 'w')
    file.write('# ========================================================================== #\n')
    file.write('\n')
    file.write('# <-- Color Library --> #\n')
    file.write('\n')
    file.write('# <-- Text Color --> #\n')
    file.write('T_BLACK = \\033[30m\n')
    file.write('T_RED = \\033[31m\n')
    file.write('T_GREEN = \\033[32m\n')
    file.write('T_YELLOW = \\033[33m\n')
    file.write('T_BLUE = \\033[34m\n')
    file.write('T_MAGENTA = \\033[35m\n')
    file.write('T_CYAN = \\033[36m\n')
    file.write('T_WHITE = \\033[37m\n')
    file.write('\n')
    file.write('# <-- Text Style --> #\n')
    file.write('BOLD = \\033[1m\n')
    file.write('ITALIC = \\033[2m\n')
    file.write('UNDERLINE = \\033[3m\n')
    file.write('STRIKETHROUGH = \\033[4m\n')
    file.write('\n')
    file.write('# <-- Background Color --> #\n')
    file.write('B_RED = \\033[31m\n')
    file.write('B_BLACK = \\033[30m\n')
    file.write('B_GREEN = \\033[32m\n')
    file.write('B_YELLOW = \\033[33m\n')
    file.write('B_BLUE = \\033[34m\n')
    file.write('B_MAGENTA = \\033[35m\n')
    file.write('B_CYAN = \\033[36m\n')
    file.write('B_WHITE = \\033[37m\n')
    file.write('\n')
    file.write('# <-- Reset Everything --> #\n')
    file.write('RESET = \\033[0m\n')
    file.write('\n')
    file.write('# ========================================================================== #\n')
    file.write('\n')
    file.write('# <-- Library\'s Name --> #\n')
    file.write('NAME = {}\n'.format(name))
    file.write('\n')
    file.write('# <-- Compilation Command --> #\n')
    file.write('CC = gcc\n')
    file.write('\n')
    file.write('# <-- Compilation Flags --> #\n')
    file.write('CFLAGS = -Wall -Wextra -Werror\n')
    file.write('\n')
    file.write('# <-- Remove Command -->#\n')
    file.write('RM = rm -f\n')
    file.write('\n')
    file.write('# <-- Directories --> #\n')
    file.write('SRC_DIR = src/\n')
    file.write('UTILS_DIR = utils/\n')
    file.write('\n')
    file.write('# <-- Files --> #\n')
    file.write('SRC_FILES = {}.c\n'.format(name))
    file.write('UTILS_FILES = utils.c\n')
    file.write('\n')
    file.write('# <-- Directories + Files --> #\n')
    file.write('SRC = $(addprefix $(SRC_DIR), $(SRC_FILES))\n')
    file.write('UTILS = $(addprefix $(UTILS_DIR), $(UTILS_FILES))\n')
    file.write('\n')
    file.write('# <-- Objects --> #\n')
    file.write('OBJ_SRC = $(SRC:.c=.o)\n')
    file.write('OBJ_UTILS = $(UTILS:.c=.o)\n')
    file.write('\n')
    file.write('# ========================================================================== #\n')
    file.write('\n')
    file.write('# <-- Main Target --> #\n')
    file.write('all: $(NAME)\n')
    file.write('\n')
    file.write('# <--Library Creation--> #\n')
    file.write('$(NAME): $(OBJ_SRC) $(OBJ_UTILS)\n')
    file.write('\t@echo \"$(T_YELLOW)$(BOLD)Objects created successfully$(RESET)\"\n')
    file.write('\tar rcs $(NAME) $(OBJ_SRC) $(OBJ_UTILS)\n')
    file.write('\t@echo \"$(T_YELLOW)$(BOLD)$(NAME) created successfully$(RESET)\"\n')
    file.write('\n')
    file.write('# <-- Objects Creation --> #\n')
    file.write('%.o: %.c\n')
    file.write('\t$(CC) $(FLAGS) -c $< -o $@\n')
    file.write('\n')
    file.write('# <-- Objects Destruction --> #\n')
    file.write('clean:\n')
    file.write('\t$(RM) $(OBJ_SRC) $(OBJ_UTILS)\n')
    file.write('\t@echo \"$(T_RED)$(BOLD)Objects destroyed successfully$(RESET)\"\n')
    file.write('\n')
    file.write('# <- Clean Execution + {} Destruction -> #\n'.format(name))
    file.write('fclean: clean\n')
    file.write('\t$(RM) $(NAME)\n')
    file.write('\t@echo \"$(T_RED)$(BOLD)$(NAME) destroyed successfully$(RESET)\"\n')
    file.write('\n')
    file.write('# <- Fclean Execution + All Execution -> #\n')
    file.write('re: fclean all\n')
    file.write('\n')
    file.write('# <- Targets Declaration -> #\n')
    file.write('.PHONY = all clean fclean re\n')
    file.write('\n')
    file.write('# ========================================================================== #')
    file.close

def main():
    project_name = input('Introduce the name of the project: ')
    create_dirs()
    c_main_template(project_name)
    c_header_template(project_name)
    c_utils_template(project_name)
    c_makefile_template(project_name)

if (__name__ == "__main__"):
    main()
